import groovy.json.JsonSlurperClassic

def build_id
def build_zip
def build_tar
def build_maven
def buildRuns
def authProps = [
  'requestProperties' : [
    'Authorization': "Basic ${'mw-build-user:da2011a51dc4a01e9001dd68149225ca'.bytes.encodeBase64()}".toString()
  ]
]

node () {
    stage('get stagger info') {
        checkout scm
        sh "sh ./scripts/getamq.sh"
        def props = readProperties  file:'build.properties'
        build_id= props['BUILDID']
        build_zip= props['BUILDZIP']
        build_tar= props['BUILDTAR']
        build_maven= props['BUILDMAVEN']
        echo "build_id=${build_id}"
        echo "build_zip=${build_zip}"
        echo "build_tar=${build_tar}"
        echo "build_maven=${build_maven}"
    }
    stage ('build eap') {
        def eap = build(
        job: 'early-testing-messaging-prepare',
        parameters: [
            [ $class: 'StringParameterValue', name: 'EAP_REPO', value: 'https://github.com/ehsavoie/wildfly/' ],
            [ $class: 'StringParameterValue', name: 'EAP_BRANCH', value: 'messaging_upstream' ],
            [ $class: 'StringParameterValue', name: 'ARTEMIS_ZIP_URL', value: build_zip]
        ],
        propagate: false
        )
        if (eap.result != 'SUCCESS') {
            throw new Exception("EAP build job failed.")
        }
        eapZipUrl = "${eap.absoluteUrl}/artifact/jboss-eap.zip"
        clientsVersion = "${eap.absoluteUrl}/artifact/clients-version.txt".toURL().getText(authProps).trim()

    }
    stage('EAP Tests') {

        def viewUrl = "https://mw-messaging-qe-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/view/AMQ%20Broker%20Nightly/api/json".toURL()

        def tasks = [:]
        for (def job : getJobsFromView(viewUrl, authProps)) {
          if (job.color == 'disabled') {
            continue
          }
          def jobName = job.name
          tasks[jobName] = {
            build(
              job: jobName,
              parameters: [
                [ $class: 'StringParameterValue', name: 'EAP_ZIP_URL', value: eapZipUrl ],
                [ $class: 'StringParameterValue', name: 'EAP_VERSION', value: clientsVersion ],
                [ $class: 'StringParameterValue', name: 'ARTEMIS_REPO', value: params.ARTEMIS_REPO ],
                [ $class: 'StringParameterValue', name: 'TESTSUITE_REPO', value: params.TESTSUITE_REPO ],
                [ $class: 'StringParameterValue', name: 'TESTSUITE_BRANCH', value: params.TESTSUITE_BRANCH ]
              ],
              propagate: false
            )
          }
        }

        def jobs = parallel(tasks)

        def failedJobs = []
        for (def build : jobs.values()) {
            if (build.result != 'SUCCESS') {
                failedJobs << build
            }
        }

        if (failedJobs.empty) {
            for (def job : jobs.values()) {
                      buildRuns += "${job.absoluteUrl}\n"
                  }
        } else {
            for (def failedJob : failedJobs) {
                println "Failed job: ${failedJob.absoluteUrl}"
            }
        }

    }
    stage('Collate Results') {
        writeFile file: "results.txt", text: buildRuns
        archiveArtifacts artifacts: 'results.txt'
    }
}